########################################
# Dihedral angle plotter
# 1. Loads hdf5 generated by dynamics code
# 2. Plots 1-2-3-4 angle as a function of time
########################################

import numpy as np
import h5py

########################################
# Angle function
########################################

def angle(v1, v2):

    # Normalize
    u1 = v1 / np.linalg.norm(v1)
    u2 = v2 / np.linalg.norm(v2)

    # Calculate arccos of dot product
    d = np.clip(np.dot(u1, u2), -1.0, 1.0)
    a = np.arccos(d)

    # Convert to degrees
    a = np.degrees(a)

    # Flip the sign if angle passed through zero
    # Otherwise the angle will always be positive
    cross = np.cross(u1, u2)
    if angle.cross is not None and np.dot(angle.cross, cross) < 0:
        angle.sign = - angle.sign

    # Store cross product
    angle.cross = cross

    # Return signed angle
    return a * angle.sign

# Static variables to track the sign of the angle
angle.cross = None
angle.sign  = 1

########################################
# Main function
########################################

# Atom ids forming the dihedral angle

# Upper HCCH
atom1 = 2
atom2 = 0
atom3 = 1
atom4 = 4

# Lower HCCH
#atom1 = 3
#atom2 = 0
#atom3 = 1
#atom4 = 5

# Time step
timestep = 2 * 0.120944216329 # 10 au

# Open h5py file
h5f = h5py.File('data.hdf5', 'r')

# Get geometries dataset
geom = h5f['geom']

# Get number of iterations
niters = geom.shape[0]

# Print table header
print(('{:>10s} {:>10s} {:>25s}').format('Iteration', 'Time (fs)', 'Angle (deg)'))

# Iterate over dynamics
for it in range(0, niters):

    # Get all 4 atom positions
    g1 = geom[it, atom1, :]
    g2 = geom[it, atom2, :]
    g3 = geom[it, atom3, :]
    g4 = geom[it, atom4, :]

    # 1-2-3 part
    v1 = np.cross(g2 - g1, g3 - g2)

    # 2-3-4 part
    v2 = np.cross(g3 - g2, g4 - g3)

    # Dihedral angle
    a = angle(v1, v2)

    # Print the angle
    print(('{:10d} {:10.5f} {:25.17f}').format(it, it * timestep, a))

print('')

# Close
h5f.close()
